# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T18:11:15+00:00



import argparse
import json
import os
from typing import *

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity
from fastapi import Header
from starlette.requests import Request

from models import AirtravelMultilegRequest

app = MCPProxy(
    contact={},
    title='climateKuul live',
    version='1.0',
    servers=[{'url': 'http://api.climatekuul.com:8000/footprint', 'variables': {}}],
)


@app.post('/airtravelCoordinates', tags=['air_travel_management'])
def airtravel_coordinates(
    content__type: str = Header(..., alias='Content-Type'), request: Request = ...
):
    """
    airtravelCoordinates
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/airtravelCoordinates/confirmCarbonOffset', tags=['carbon_offset_confirmation']
)
def confirm_carbon_offset4(request: Request):
    """
    confirmCarbonOffset
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch('/airtravelCoordinates/confirmPayment', tags=['payment_confirmation'])
def confirm_payment4(request: Request):
    """
    confirmPayment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/airtravelCoordinates/confirmPlanting', tags=['planting_activity_confirmation']
)
def confirms_planting4(request: Request):
    """
    confirmPlanting
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch('/airtravelCoordinates/confirmTransaction', tags=['payment_confirmation'])
def confirm_payment_of_transaction4(request: Request):
    """
    confirmTransaction
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/airtravelMultileg', tags=['air_travel_management'])
def airtravel_multileg(body: AirtravelMultilegRequest):
    """
    airtravelMultileg
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/airtravelMultileg/confirmCarbonOffset', tags=['carbon_offset_confirmation']
)
def confirm_carbon_offset3(request: Request):
    """
    confirmCarbonOffset
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch('/airtravelMultileg/confirmPayment', tags=['payment_confirmation'])
def confirm_payment3(request: Request):
    """
    confirmPayment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/airtravelMultileg/confirmPlanting', tags=['planting_activity_confirmation']
)
def confirms_planting3(request: Request):
    """
    confirmPlanting
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch('/airtravelMultileg/confirmTransaction', tags=['payment_confirmation'])
def confirm_payment_of_transaction3(request: Request):
    """
    confirmTransaction
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/ecommerceDelivery',
    tags=['ecommerce_shipping_options', 'urban_logistics_services'],
)
def ecommerce_delivery(
    content__type: str = Header(..., alias='Content-Type'), request: Request = ...
):
    """
    ecommerceDelivery
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/ecommerceDelivery/confirmCarbonOffset', tags=['carbon_offset_confirmation']
)
def confirm_carbon_offset1(request: Request):
    """
    confirmCarbonOffset
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch('/ecommerceDelivery/confirmPayment', tags=['payment_confirmation'])
def confirm_payment1(request: Request):
    """
    confirmPayment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/ecommerceDelivery/confirmPlanting',
    tags=['planting_activity_confirmation', 'carbon_offset_confirmation'],
)
def confirms_planting2(request: Request):
    """
    confirmPlanting
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch('/ecommerceDelivery/confirmTransaction', tags=['payment_confirmation'])
def confirm_payment_of_transaction1(request: Request):
    """
    confirmTransaction
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/requestApiKey', tags=['api_key_handling'])
def request_api_key(request: Request):
    """
    requestApiKey
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/roadDistance', tags=['road_trip_distance_calculation'])
def road_distance(request: Request):
    """
    RoadDistance
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch('/roadDistance/confirmCarbonOffset', tags=['carbon_offset_confirmation'])
def confirm_carbon_offset5(request: Request):
    """
    confirmCarbonOffset
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch('/roadDistance/confirmPayment', tags=['payment_confirmation'])
def confirm_payment5(request: Request):
    """
    confirmPayment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch('/roadDistance/confirmPlanting', tags=['planting_activity_confirmation'])
def confirms_planting5(request: Request):
    """
    confirmPlanting
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch('/roadDistance/confirmTransaction', tags=['payment_confirmation'])
def confirm_payment_of_transaction5(request: Request):
    """
    confirmTransaction
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/urbanDelivery', tags=['urban_logistics_services', 'ecommerce_shipping_options']
)
def urban_delivery(request: Request):
    """
    urbanDelivery
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch('/urbanDelivery/confirmCarbonOffset', tags=['carbon_offset_confirmation'])
def confirm_carbon_offset(request: Request):
    """
    confirmCarbonOffset
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch('/urbanDelivery/confirmPayment', tags=['payment_confirmation'])
def confirm_payment(request: Request):
    """
    confirmPayment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch('/urbanDelivery/confirmPlanting', tags=['planting_activity_confirmation'])
def confirms_planting(request: Request):
    """
    confirmPlanting
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch('/urbanDelivery/confirmTransaction', tags=['payment_confirmation'])
def confirm_payment_of_transaction(request: Request):
    """
    confirmTransaction
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
